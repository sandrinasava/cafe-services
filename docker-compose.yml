
services:
  caddy:
    image: caddy:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile # Конфигурационный файл Caddy
      - ./data:/data # для хранения сертификатов

  auth-service:
    build: 
      context: ./auth-service
      dockerfile: Dockerfile
    env_file:
      - ./auth-service/.env
    depends_on:
      - db
    deploy:
     replicas: 2

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    env_file:
      - ./order-service/.env
    depends_on:
      - kafka
      - db
      - redis
      - auth-service
    deploy:
     replicas: 2

  kitchen-service:
    build:
      context: ./kitchen-service
      dockerfile: Dockerfile
    env_file:
      - ./kitchen-service/.env
    depends_on:
      - kafka

  delivery-service:
    build:
      context: ./delivery-service
      dockerfile: Dockerfile
    env_file:
      - ./delivery-service/.env
    depends_on:
      - kafka
      - db

  kafka:
    image: wurstmeister/kafka:2.13-2.8.0
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - kafka_data:/var/lib/kafka/data

  zookeeper:
    image: wurstmeister/zookeeper
    environment:
     ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

  db:
    image: postgres:latest
    env_file:
      - ./db/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql 
    deploy:
     replicas: 2   

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    env_file:
      - ./redis/.env
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]  
    volumes:
      - redis_data:/data

volumes:
  redis_data:
  postgres_data:
  zookeeper_data:
  kafka_data: